	These instructions are written for Tomcat version 9.	
	
	Command (example) to generate keystore.jks :
	
	keytool -genkeypair -alias ALIAS -keyalg RSA -dname "CN=architect.local.org,OU=Acs,O=Aalto University,L=Espoo,S=Uusimaa,C=FI" -keypass "own_passwd" -keystore keystore.jks -storepass "own_passwd"
	keytool -exportcert -keystore Jyrki_Oraskari.p12 -storetype PKCS12 -storepass "own_passwd" -alias Jyrki_Oraskari -file jyrkio.cer

    keytool -importcert -keystore keystore.jks -alias clientcert -file jyrkio.cer -storepass "own_passwd" -noprompt
 
	# view the contents of the keystore (use -v for verbose output)
	keytool -list -keystore keystore.jks -storepass own_passwd	

    first and last name: your.host.name.org	
	
	1. Set Tomcat server to use SSH always:
	   Exaple server.xml addition:
	   
	   
	    <Connector port="443" protocol="org.apache.coyote.http11.Http11NioProtocol"
               maxThreads="150" SSLEnabled="true">
        <SSLHostConfig 
                       truststoreFile="c:\file_location\keystore.jks"
                       truststorePass="tomcat"
                       certificateVerification="optional">
            <Certificate certificateKeystoreFile="c:\file_location\keystore.jks"
                          certificateKeystorePassword="own_passwd"
                          certificateKeyAlias="local.org"
                         type="RSA" />
        </SSLHostConfig>
    </Connector>
	   

	2. To make Tomcat to recognize the new authentication method, the method has to be registered. It is done by adding a new line:
	DRUMBEAT_AUTHENTICATION=fi.aalto.cs.drumbeat.CertificateAuthenticator

	to:
	Tomcat:/lib/catalina.jar/org/apache/catalina/startup/Authenticators.properties

    3. drumbeat_security_auth-1.0.jar	 needs to be copied to: Tomcat:/lib/
    Tomcat:/lib/drumbeat should be created and contain the following files:
    
    		commons-codec-1.9.jar
			commons-io-2.4.jar
			commons-rdf-api-0.2.0-incubating.jar
			guava-18.0.jar
			httpclient-4.5.2.jar
			httpcore-4.4.4.jar
			javax.servlet-api-3.1.0.jar
			jersey-client-1.9.jar
			jersey-core-1.9.jar
			json-simple-1.1.1.jar
			log4j-1.2.17.jar
			mapdb-1.0.7.jar
			sesame-http-client-4.1.2.jar
			sesame-http-protocol-4.1.2.jar
			sesame-model-4.1.2.jar
			sesame-query-4.1.2.jar
			sesame-queryalgebra-evaluation-4.1.2.jar
			sesame-queryalgebra-model-4.1.2.jar
			sesame-queryparser-api-4.1.2.jar
			sesame-queryparser-serql-4.1.2.jar
			sesame-queryparser-sparql-4.1.2.jar
			sesame-queryresultio-api-4.1.2.jar
			sesame-queryresultio-sparqlxml-4.1.2.jar
			sesame-repository-api-4.1.2.jar
			sesame-repository-sail-4.1.2.jar
			sesame-repository-sparql-4.1.2.jar
			sesame-rio-api-4.1.2.jar
			sesame-rio-datatypes-4.1.2.jar
			sesame-rio-languages-4.1.2.jar
			sesame-rio-ntriples-4.1.2.jar
			sesame-rio-trig-4.1.2.jar
			sesame-rio-turtle-4.1.2.jar
			sesame-sail-api-4.1.2.jar
			sesame-sail-base-4.1.2.jar
			sesame-sail-inferencer-4.1.2.jar
			sesame-sail-memory-4.1.2.jar
			sesame-sail-model-4.1.2.jar
			sesame-sail-nativerdf-4.1.2.jar
			sesame-util-4.1.2.jar
			slf4j-api-1.7.10.jar
			slf4j-log4j12-1.7.22.jar
			tomcat-annotations-api-9.0.0.M17.jar
			tomcat-api-9.0.0.M17.jar
			tomcat-catalina-9.0.0.M17.jar
			tomcat-coyote-9.0.0.M17.jar
			tomcat-el-api-9.0.0.M17.jar
			tomcat-jaspic-api-9.0.0.M17.jar
			tomcat-jni-9.0.0.M17.jar
			tomcat-jsp-api-9.0.0.M17.jar
			tomcat-juli-9.0.0.M17.jar
			tomcat-servlet-api-9.0.0.M17.jar
			tomcat-util-9.0.0.M17.jar
			tomcat-util-scan-9.0.0.M17.jar
    
	They are located in the drumbeat_security_auth-1.0.jar file in the /lib directory.

	4. The web applications needs to define on its web.xml:

	<security-constraint>
		<web-resource-collection>
			<web-resource-name>all</web-resource-name>
			<url-pattern>/protected/*</url-pattern>
		</web-resource-collection>
	</security-constraint>
	<login-config>
		<auth-method>DRUMBEAT_AUTHENTICATION</auth-method>
	</login-config>
	<session-config>
		<session-timeout>525600</session-timeout>
		<cookie-config>
			<max-age>31536000</max-age>
		</cookie-config>
	</session-config>		
		
	5. The javax.ws.rs Jersey RESTful API implementation can use tags like: @PermitAll and @RolesAllowed("role1") 
	
	6. The following code segments can be used in the application:
	
	public String isSecure2(@Context SecurityContext sc) {
		return "{\"name\":\"" + sc.getUserPrincipal().getName() + " \"}";
	}
	
	public String isSecure3(@Context SecurityContext sc) {

		if (sc.isUserInRole("tomcat")) {
			return "{\"role\":\"Tomcat\"}";
		} else {
			return "{\"role\":\"not Tomcat\"}";
		}

	}
	
		
